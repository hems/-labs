// Generated by CoffeeScript 1.4.0
/* BalloonDemo
*/

var BalloonDemo,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

BalloonDemo = (function(_super) {

  __extends(BalloonDemo, _super);

  BalloonDemo.prototype.lfo = {
    x: 0,
    y: 0
  };

  BalloonDemo.prototype.original = null;

  function BalloonDemo() {
    this.mousemove = __bind(this.mousemove, this);
    BalloonDemo.__super__.constructor.call(this);
    this.mouse = new PicoParticle;
    this.mouse.fixed = true;
  }

  BalloonDemo.prototype.setup = function(full) {
    var attraction, i, max, p, s, _i, _results;
    if (full == null) {
      full = true;
    }
    BalloonDemo.__super__.setup.call(this, full);
    this.physics.integrator = new ImprovedEuler();
    attraction = new Attraction(this.mouse.pos, 10000, 5000);
    this.original = new Vector();
    this.original.x = $(window).width() / 2;
    this.original.y = $(window).height() / 2;
    this.mouse.pos.set(this.original.x, this.original.y);
    max = full ? 400 : 200;
    max = 200;
    _results = [];
    for (i = _i = 0; 0 <= max ? _i <= max : _i >= max; i = 0 <= max ? ++_i : --_i) {
      p = new Particle(Random(0.1, 1.0));
      p.setRadius(p.mass * 8);
      p.behaviours.push(new Wander(10));
      p.behaviours.push(attraction);
      p.moveTo(new Vector(Random(this.width), Random(this.height)));
      s = new Spring(this.mouse, p, Random(30, 300), 1.0);
      this.physics.particles.push(p);
      _results.push(this.physics.springs.push(s));
    }
    return _results;
  };

  BalloonDemo.prototype.step = function() {
    var radius;
    BalloonDemo.__super__.step.call(this);
    this.lfo.x += 0.05 / 8;
    this.lfo.y += 0.1 / 8;
    radius = 200;
    this.mouse.pos.x = this.original.x + Math.cos(this.lfo.x) * radius * 2;
    this.mouse.pos.y = this.original.y + Math.sin(this.lfo.y) * radius;
    return this.mouse.update();
  };

  /* Handler for window mousemove event.
  */


  BalloonDemo.prototype.mousemove = function(event) {
    var touch;
    return;
    event.preventDefault();
    if (event.touches && !!event.touches.length) {
      touch = event.touches[0];
      return this.mouse.pos.set(touch.pageX, touch.pageY);
    } else {
      return this.mouse.pos.set(event.clientX, event.clientY);
    }
  };

  return BalloonDemo;

})(Demo);
